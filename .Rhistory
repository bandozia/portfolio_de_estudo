library(plotly)
?plot_geo
map_data("world", "canada") %>%
group_by(group) %>%
plot_geo(x = ~long, y = ~lat) %>%
add_markers(size = I(1))
?plot_dendro
?plot_ly
plot_ly(economics, x = ~pop)
plot_ly(economics, x = pop)
plot_ly(economics, x = economics$pop)
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(z = ~volcano)
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
plot_ly(z = ~volcano)
plot_ly(z = ~volcano, type = "surface")
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
?plot_dendro
hc <- hclust(dist(USArrests), "ave")
dend1 <- as.dendrogram(hc)
plot_dendro(dend1, height = 600) %>%
hide_legend() %>%
highlight(persistent = TRUE, dynamic = TRUE)
plot_ly(regWomen)
plot_ly(mtcars)
plot_ly(mtcars, x = mtcars$cyl)
plot_ly(mtcars, y = mtcars$cyl)
plot_ly(cars, y = cars$speed)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot(women, x = women$height)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot_ly(women, x = women$height)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot_ly(women, y = women$height)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot_ly(mtcars, y = mtcars$wt)
volcano
class(volcano)
volcano[1,]
volcano[1,1]
#se apenas um eixo for fornecido criará um histograma
plot_ly(mtcars, y = mtcars$wt, type = "hist")
#se apenas um eixo for fornecido criará um histograma
plot_ly(mtcars, y = mtcars$wt, type = "histogram")
plot_ly(economics, x = ~date, y = ~pop)
library(plotly)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um histograma
plot_ly(mtcars, y = mtcars$wt, type = "histogram")
plot_ly(z = ~volcano, type = "heatmap")
plot_ly(z = ~volcano, type = "surface")
matrix(c(1:5),c(1:5))
matrix(c(1:10),c(1:5))
matrix(c(1:10),c(1:10))
matrix(c(1:10))
matrix(1:10)
matrix(1:10,1:20)
cars
kmeans(cars,3)
km <- kmeans(cars, 3)
plot(km)
plot(km$centers)
library(ggplot2)
ggplot(aes(cars$speed,cars$dist)) + geom_density_2d()
ggplot(aes(cars$speed,cars$dist)) + geom_point()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_point()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_point() + geom_area()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_crossbar()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_point() + geom_pointrange()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_point() + geom_pointrange(km$centers)
ggplot(cars, aes(cars$speed,cars$dist)) + geom_point()
ggplot(cars, aes(cars$speed,cars$dist, color = km$cluster)) + geom_point()
rm(km)
cilindos <- factor(mtcars$cyl, labels = c('4 Cilindros', '6 Cilindros', '8 Cilindros'))
cilindos
cclusters <- kmeans(cilindos[,c('wt','qseq')], 3, nstart = 30)
rm(cilindos)
mtcarros <- mtcars
mtcarros$cyl <- factor(mtcars$cyl, labels = c('4 Cilindros', '6 Cilindros', '8 Cilindros'))
mtcarros
cclusters <- kmeans(mtcarros[,c('wt','qseq')], 3, nstart = 30)
cars <- mtcars
cars$cyl <- factor(cars$cyl, labels =
c('Four cylinder', 'Six cylinder', 'Eight cylinder'))
features <- c('wt', 'qsec')
n_clusters <- 3
car_clusters <- kmeans(cars[, features], n_clusters, nstart = 30)
cars$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
# cross tab of cylinder by cluster
print(table(cars$cluster, cars$cyl))
g <- ggplot() +
geom_point(data = cars,
aes(x = wt,
y = qsec,
color = cluster),
size = 3) +
geom_text(data = cars,
aes(x = wt,
y = qsec,
label = row.names(cars),
color = cluster),
nudge_y = .2,
check_overlap = TRUE) +
geom_point(data = centroids,
mapping = aes(x = wt,
y = qsec,
color = cluster),
size = 20,
pch = 13)
print(g)
cars <- mtcars
cars$cyl <- factor(cars$cyl, labels =
c('Four cylinder', 'Six cylinder', 'Eight cylinder'))
features <- c('wt', 'qsec')
n_clusters <- 3
car_clusters <- kmeans(cars[, features], n_clusters, nstart = 30)
cars$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
View(cars)
cars <- mtcars
features <- c('wt', 'qsec')
n_clusters <- 3
car_clusters <- kmeans(cars[, features], n_clusters, nstart = 30)
cars$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
View(cars)
car_clusters <- kmeans(cars[, c('wt', 'qsec')], n_clusters, nstart = 30)
cars <- mtcars
car_clusters <- kmeans(cars[, c('wt', 'qsec')], 3, nstart = 30)
cars$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
View(cars)
head(cars)
library(dplyr)
library(dplyr)
library(ggplot2)
cars <- mtcars
car_clusters <- kmeans(cars[, c('wt', 'qsec')], 3, nstart = 30)
cars$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
View(cars)
cars %>% select(row.names,cluster)
cars %>% select(row_number,cluster)
cars %>% select(rownames,cluster)
cars %>% select(rownames(cars),cluster)
View(cars)
rownames(cars)
add_rownames(cars,"name")
cars
?tibble::rownames_to_column
rm(mtcarros)
cars <- as_tibble(rownames_to_column(mtcars))
library(tibble)
cars <- as_tibble(rownames_to_column(mtcars))
View(cars)
cars
rm(cars)
cars
mtcarros <- as_tibble(rownames_to_column(mtcars))
car_clusters <- kmeans(mtcarros[, c('wt', 'qsec')], 3, nstart = 30)
mtcarros$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
View(mtcarros)
mtcarros %>% select(rowname, cluster)
mtcarros <- as_tibble(rownames_to_column(mtcars))
car_clusters <- kmeans(mtcarros[, c('wt', 'qsec')], 3, nstart = 30)
mtcarros$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
mtcarros %>% select(rowname, cluster)
ggplot() + geom_point(mtcarros, aes(x = wt, y = qsec, color = cluster))
ggplot() + geom_point(mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec))
ggplot() + geom_point(mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec))
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec))
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster))
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster))
+ geom_point(data=centroids, mapping = aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster))
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) + geom_point(data=centroids, mapping = aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster))
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt,
y = qsec,
color = cluster),
size = 20,
pch = 13)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt,
y = qsec,
color = cluster))
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt,
y = qsec,
color = cluster), size=15)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt,
y = qsec,
color = cluster), size=7, pch=13)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=7, pch=13)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=7, pch=12)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=7, pch=1)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=30, pch=1)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=2)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=1)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=10)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=15)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=8)
library(dplyr)
library(tibble)
library(ggplot2)
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v ** 2
vis <- v[1] + v[3]
vis
v2 <- c(2,2,2,2,2)
v +v2
v2 <- c(3,3,3)
v * v2
v[1:3]
v > 3
v[v>3]
m1 <- matrix(1:20, nrow = 4, ncol = 5)
m1
m1 * 5
m1 * v
m2 <- matrix(20:39, nrow = 4, ncol = 5)
m1 * m2
m1 + m2
m3 <- matrix(1:20, nrow = 5, ncol = 4)
m1 %*% m3
random_vec <- sample(30)
random_vec
sum(random_vec)
sum(mtcars$gear == 4)
vec_m <- c(1,2,3,4,5,6,7,8,9,10,30)
mean(vec_m)
median(vec_m)
vec_var <- sample(20)
vec_var
sd(vec_var)
women
regWomen <- lm(women$height ~ women$weight)
summary(regWomen)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,25),c(5,80), col='red')
plot(UKDriverDeaths)
plot(regWomen)
boxplot(airquality)
hist(mtcars$mpg)
select(mtcars, mpg,hp,qsec,gear)
select(mtcars, hp:gear)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 20.1)
arrange(mtcars, cyl, desc(gear))
mutate(USArrests, murder_prop = Murder / (Assault + Rape))
airquality %>% filter(Month == 8) %>% select(Ozone,Temp,Wind) %>% mutate(vento_ao_quadrado = Wind ** 2)
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#333333')
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
mtcarros <- as_tibble(rownames_to_column(mtcars))
car_clusters <- kmeans(mtcarros[, c('wt', 'qsec')], 3, nstart = 30)
mtcarros$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
mtcarros %>% select(rowname, cluster)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=8)
library(ggplot2)
?geom_area
huron <- data.frame(year = 1875:1972, level = as.vector(LakeHuron))
h <- ggplot(huron, aes(year))
h + geom_ribbon(aes(ymin=0, ymax=level))
h + geom_area(aes(y = level))
rm(huron)
?geom_density2d
set.seed(4393)
dsmall <- diamonds[sample(nrow(diamonds), 1000), ]
d <- ggplot(dsmall, aes(x, y))
# If you map an aesthetic to a categorical variable, you will get a
# set of contours for each value of that variable
d + geom_density_2d(aes(colour = cut))
?geom_crossbar
df <- data.frame(
trt = factor(c(1, 1, 2, 2)),
resp = c(1, 5, 3, 4),
group = factor(c(1, 2, 1, 2)),
upper = c(1.1, 5.3, 3.3, 4.2),
lower = c(0.8, 4.6, 2.4, 3.6)
)
p <- ggplot(df, aes(trt, resp, colour = group))
p + geom_linerange(aes(ymin = lower, ymax = upper))
p + geom_pointrange(aes(ymin = lower, ymax = upper))
p + geom_crossbar(aes(ymin = lower, ymax = upper), width = 0.2)
p + geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2)
?geom_density
ggplot(diamonds, aes(carat)) +
geom_density()
ggplot(diamonds, aes(carat)) +
geom_density(adjust = 1/5)
ggplot(diamonds, aes(carat)) +
geom_density(adjust = 5)
ggplot(diamonds, aes(carat, stat(count), fill = cut)) +
geom_density(position = "fill")
?geom_dotplot
ggplot(mtcars, aes(x = mpg)) + geom_dotplot()
?geom_freqpoly
ggplot(diamonds, aes(price, fill = cut)) +
geom_histogram(binwidth = 500)
ggplot(diamonds, aes(price, colour = cut)) +
geom_freqpoly(binwidth = 500)
?geom_hex
d <- ggplot(diamonds, aes(carat, price))
d + geom_hex()
diamonds
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=8)
mtcarros <- as_tibble(rownames_to_column(mtcars))
library(dplyr)
library(tibble)
library(ggplot2)
library(dplyr)
library(tibble)
library(ggplot2)
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v ** 2
vis <- v[1] + v[3]
vis
v2 <- c(2,2,2,2,2)
v +v2
v2 <- c(3,3,3)
v * v2
v[1:3]
v > 3
v[v>3]
m1 <- matrix(1:20, nrow = 4, ncol = 5)
m1
m1 * 5
m1 * v
m2 <- matrix(20:39, nrow = 4, ncol = 5)
m1 * m2
m1 + m2
m3 <- matrix(1:20, nrow = 5, ncol = 4)
m1 %*% m3
random_vec <- sample(30)
random_vec
sum(random_vec)
sum(mtcars$gear == 4)
vec_m <- c(1,2,3,4,5,6,7,8,9,10,30)
mean(vec_m)
median(vec_m)
vec_var <- sample(20)
vec_var
sd(vec_var)
women
regWomen <- lm(women$height ~ women$weight)
summary(regWomen)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,25),c(5,80), col='red')
plot(UKDriverDeaths)
plot(regWomen)
boxplot(airquality)
hist(mtcars$mpg)
select(mtcars, mpg,hp,qsec,gear)
select(mtcars, hp:gear)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 20.1)
arrange(mtcars, cyl, desc(gear))
mutate(USArrests, murder_prop = Murder / (Assault + Rape))
airquality %>% filter(Month == 8) %>% select(Ozone,Temp,Wind) %>% mutate(vento_ao_quadrado = Wind ** 2)
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#333333')
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
mtcarros <- as_tibble(rownames_to_column(mtcars))
car_clusters <- kmeans(mtcarros[, c('wt', 'qsec')], 3, nstart = 30)
mtcarros$cluster <- factor(car_clusters$cluster)
centroids <- data.frame(cluster = factor(seq(1:n_clusters)),
wt = car_clusters$centers[,'wt'],
qsec = car_clusters$centers[,'qsec'])
mtcarros %>% select(rowname, cluster)
ggplot() + geom_point(data = mtcarros, aes(x = mtcarros$wt, y = mtcarros$qsec, color = mtcarros$cluster)) +  geom_point(data = centroids,
mapping = aes(x = wt, y = qsec, color = cluster), size=8, pch=8)
library(dplyr)
library(tibble)
library(ggplot2)
crimtab
datasets::WWWusage
datasets::VADeaths
datasets::BJsales
datasets::faithful
datasets::LakeHuron
datasets::ldeaths
datasets::uspop
datasets::USArrests
USArrests
cor(USArrests)
datasets::USJudgeRatings
datasets::Titanic
economics
cor(economics)
economics[2,]
economics[,2]
economics[,2:n]
economics[,pce:"unemploy"]
economics[,"pce":"unemploy"]
economics[,2:6]
cor(economics[,2:6])
mtcars
cor(mtcars)
corMatrix <- cor(mtcars)
corMatrix
plot(corMatrix)
library(reshape2)
melt(corMatrix)
corMatrix <- cor(mtcars)
corMatrix
melt_cor_matrix <- melt(corMatrix)
melt_cor_matrix
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile()
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white")
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",  name="Pearson\nCorrelation")
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1), space = "Lab",  name="Pearson\nCorrelation")
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1), space = "Lab")
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1))
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = value), color = "black", size = 2)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value)), color = "black", size = 4)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value),2), color = "black", size = 2)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 2)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_raster(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 2)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value,2)), size = 2)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value,2)), size = 3)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1)) + geom_text(aes(Var2, Var1, label = round(value,2)), size = 2.5)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1), name="correlacao") + geom_text(aes(Var2, Var1, label = round(value,2)), size = 2.5)
ggplot(data = melt_cor_matrix, aes(Var1,Var2, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1), name="correlacao") + geom_text(aes(Var1, Var2, label = round(value,2)), size = 2.5)
ggplot(data = melt_cor_matrix, aes(Var2,Var1, fill=value)) + geom_tile(color = "white") + scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1), name="correlacao") + geom_text(aes(Var2, Var1, label = round(value,2)), size = 2.5)
