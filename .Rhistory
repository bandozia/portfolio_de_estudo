sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v ** 2
vis <- v[1] + v[3]
vis
v2 <- c(2,2,2,2,2)
v +v2
v2 <- c(3,3,3)
v * v2
v[1:3]
v > 3
v[v>3]
m1 <- matrix(1:20, nrow = 4, ncol = 5)
m1
m1 * 5
m1 * v
m2 <- matrix(20:39, nrow = 4, ncol = 5)
m1 * m2
m1 + m2
m3 <- matrix(1:20, nrow = 5, ncol = 4)
m1 %*% m3
random_vec <- sample(30)
random_vec
sum(random_vec)
sum(mtcars$gear == 4)
vec_m <- c(1,2,3,4,5,6,7,8,9,10,30)
mean(vec_m)
median(vec_m)
vec_var <- sample(20)
vec_var
sd(vec_var)
women
regWomen <- lm(women$height ~ women$weight)
summary(regWomen)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
boxplot(airquality)
barplot(mtcars)
barplot(mtcars$mpg)
hist(mtcars$mpg)
cars
mtcars
barplot(mtcars$cyl, plot = TRUE)
barplot(mtcars$cyl)
hist(mtcars$mpg, plot=TRUE)
hist(mtcars$cyl)
hist(mtcars$cyl)
hist(mtcars$mpg)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")  %>% abline()
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
line(0,15)
line(c(0,0),c(100,25))
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
line(c(0,0),c(100,25))
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
line(0,0,100,25)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
text(10,40,"teste")
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
text(10,40,"teste")
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
text(10,40,"teste")
plot(cars$speed)
text(10,20,"teste")
plot(cars$speed)
text(10,20,"teste")
plot(cars$speed)
text(10,20,"teste")
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
text(10,40,"teste")
text(10,40,"teste")
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
line(c(0,0),c(20,80))
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
line(c(0,0),c(20,80))
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
line(c(0,0),c(20,80))
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
line(c(0,0),c(20,80))
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
line(0,0,20,80)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
line(c(0,0),c(20,80),col = "red")
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
text(0,50,"ok")
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
text(10,50,"ok")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância") %>% text(10,50,"ok")
?line
line(cars)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
line(cars$speed)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
lines (10,20, col='red')
lines (25,20, col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
lines (10,20, col='red')
lines (25,20, col='red')
lines (c(10,20)c(25,20), col='red')
lines (c(10,20),c(25,20), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
lines (c(10,20),c(25,20), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,0),c(25,80), col='blue')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,0),c(25,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,0),c(25,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(10,10),c(25,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(10,10),c(10,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,0),c(10,80), col='red')
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,80),c(10,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,80),c(10,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,80),c(0,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,80),c(0,25), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,80),c(80,25), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,0),c(80,25), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(0,1),c(80,25), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,5),c(80,25), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,10),c(80,25), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,10), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,10),c(5,10), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,25),c(5,10), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,25),c(5,80), col='red')
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,25),c(5,80), col='red')
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(-(x:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?"Comparison"
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na (c (3, 5, NA, 10))
filter(cran, !is.na(r_version) )
cran2 <- select(size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2 ^ 20)
mutate(cran3, size_mb = size / 2 ^ 20, size_gb = size_mb / 2 ^ 20)
mutate(cran3, size_mb = size / 2 ^ 20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, size_mb = size / 2 ^ 20, size_gb = size_mb / 2 ^ 10, correct_size = size_gb + 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean (size))
library(swirl)
swirl()
library(dplyr)
mtcars
tbl_df(mtcars)
?tbl_df
as_tibble(mtcars)
mtc <- as_tibble(mtcars)
mtc
View(mtc)
View(regWomen)
as_tibble(regWomen)
View(m3)
mtcars
View(mtc)
test22 <- mtcars
View(test22)
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v ** 2
vis <- v[1] + v[3]
vis
v2 <- c(2,2,2,2,2)
v +v2
v2 <- c(3,3,3)
v * v2
v[1:3]
v > 3
v[v>3]
m1 <- matrix(1:20, nrow = 4, ncol = 5)
m1
m1 * 5
m1 * v
m2 <- matrix(20:39, nrow = 4, ncol = 5)
m1 * m2
m1 + m2
m3 <- matrix(1:20, nrow = 5, ncol = 4)
m1 %*% m3
random_vec <- sample(30)
random_vec
sum(random_vec)
sum(mtcars$gear == 4)
vec_m <- c(1,2,3,4,5,6,7,8,9,10,30)
mean(vec_m)
median(vec_m)
vec_var <- sample(20)
vec_var
sd(vec_var)
women
regWomen <- lm(women$height ~ women$weight)
summary(regWomen)
plot(x = cars$speed, y = cars$dist, main = "Distâncias de parada", xlab = "Velocidade", ylab = "Distância")
#Também é possível interferir no gráfico que foi plotado. Os dois comandos devem ser executados juntos.
lines (c(5,25),c(5,80), col='red')
boxplot(airquality)
hist(mtcars$mpg)
as_tibble(mtcars)
mtcars
USArrests
ability.cov
mtcars
select(mtcars, mpg,hp,qsec,gear)
select(mtcars, hp:gear)
esoph
discoveries
plot(discoveries)
islands
Harman23.cor
mtcars
filter(mtcars, hp > 100, wt < 3000)
filter(mtcars, hp > 100, wt < 3000 | qsec > 21)
filter(mtcars, hp > 100, wt < 3000 || qsec > 21)
filter(mtcars, hp > 100, wt < 3000 | qsec < 21)
filter(mtcars, hp > 100, wt < 3000 | qsec > 22)
filter(mtcars, hp > 100, wt < 3000)
filter(mtcars, hp > 100, wt < 3.000)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 22)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 21)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 21.0)
filter(mtcars, hp > 100, wt < 3.000 | qsec < 21.0)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 15)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 15.1)
filter(mtcars, hp > 100, wt < 3.000 | qsec > 20.1)
arrange(mtcars, cyl, desc(gear))
summary(mtcars)
teste <- mtcars
rm(teste)
USArrests
Titanic
mutate(USArrests, murder_prop = Murder / (Assaut + Rape))
mutate(USArrests, murder_prop = Murder / (Assault + Rape))
mutate(USArrests, murder_prop = Murder / (Assault + Rape) * 100)
mutate(USArrests, murder_prop = Murder / (Assault + Rape))
USJudgeRatings
USPersonalExpenditure
crimtab
airquality
airquality %>% filter(Month == 8) %>% select(Ozone,Temp,Wind)
airquality %>% filter(Month == 8) %>% select(Ozone,Temp,Wind) %>% mutate(Diam = Day + 1)
airquality %>% filter(Month == 8) %>% select(Ozone,Temp,Wind)
airquality %>% filter(Month == 8) %>% select(Ozone,Temp,Wind) %>% mutate(vento_ao_quadrado = Wind ** 2)
as_tibble(airquality)
as_tibble(airquality)
Titanic
plot(Titanic)
UKDriverDeaths
plot(UKDriverDeaths)
plot(UKDriverDeaths)
plot(UKDriverDeaths)
plot(regWomen)
abline(regWomen)
plot(regWomen$coefficients)
abline()
plot(regWomen$effects)
abline()
plot(regWomen$effects)
abline()
regWomen$rank
regWomen$model
regWomen$qr
regWomen$effects
regWomen
summary(regWomen)
install.packages('plotly')
plot(mtcars)
plot(mtcars)
plot.xy(mtcars$mpg)
library(plotly)
plot(mtcars$mpg)
plot_ly(mtcars$mpg)
plot_ly(mtcars)
plot_ly(mtcars, type = "scatter")
?plot_ly
plot_ly(economics)
plot_ly(economics, x = ~pop)
plot_ly(economics, x = ~date, y = ~pop
plot_ly(economics, x = ~date, y = ~pop
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(z = ~volcano)
plot_ly(z = ~volcano, type = "surface")
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
autoplot(mtcars)
autoplot(mtcars$mpg)
autoplot(c(1,2,3,4))
?autoplot
ggplot(mtcars$mpg)
ggplot(mtcars)
?ggplot
ggplot(mtcars, aes(mtcars$mpg, mtcars$cyl))
ggplot(mtcars, aes(mtcars$mpg, mtcars$cyl)) + geom_point()
ggplot(mtcars, aes(mtcars$mpg, mtcars$cyl)) + geom_abline()
ggplot(mtcars, aes(mtcars$mpg, mtcars$cyl)) + geom_bar()
ggplot(airquality, aes(airquality$Ozone,airquality$Solar.R))
ggplot(airquality, aes(airquality$Ozone,airquality$Solar.R)) + geom_curve()
ggplot(airquality, aes(airquality$Ozone,airquality$Solar.R)) + geom_point()
ggplot(airquality, aes(airquality$Ozone,airquality$Solar.R)) + geom_path()
women
ggplot(women, aes(women$height,women$weight)) + geom_point()
ggplot(women, aes(women$height,women$weight)) + geom_point()
ggplot(women, aes(women$height,women$weight)) + geom_path()
ggplot(women, aes(women$height,women$weight)) + geom_point() + geom_path()
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path()
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#cccccc')
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#333333')
ggplot(mtcars, aes(mtcars$cyl)) + geom_bar()
ggplot(mtcars, aes(mtcars$cyl, mtcars$disp)) + geom_bar()
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#333333')
cars
ggplot(cars)
ggplot(cars, aes(cars$speed,cars$dist))
ggplot(cars, aes(cars$speed,cars$dist)) + geom_area()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_col()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_curve()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_density()
mtcars %>% ggplot(aes(cyl)) + geom_density()
mtcars
economics
volcano
uspop
quakes
ggplot(quakes, aes(quakes$stations)) + geom_density()
ggplot(quakes, aes(quakes$stations, quakes$mag)) + geom_density()
ggplot(quakes, aes(quakes$stations)) + geom_count()
ggplot(mtcars, aes(mtcars$mpg)) + geom_density()
ggplot(mtcars, aes(mtcars$mpg, mtcars$mpg)) + geom_density()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_density()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_area()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_contour()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
ggplot(quakes, aes(quakes$mag)) + geom_count()
ggplot(quakes, aes(quakes$mag, 0:10)) + geom_count()
ggplot(quakes, aes(quakes$mag, quakes$stations)) + geom_count()
ggplot(quakes, aes(quakes$mag, n)) + geom_count()
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#333333')
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
ggplot(women, aes(women$height,women$weight)) + geom_point(col='red') + geom_path(col='#333333')
ggplot(cars, aes(cars$speed,cars$dist)) + geom_count()
levels(quakes$mag)
ggplot(mtcars, aes(mtcars$cyl)) + geom_bar()
ggplot(mtcars, aes(mtcars$mpg)) + geom_bar()
ggplot(mtcars, aes(mtcars$wt)) + geom_bar()
ggplot(mtcars, aes(mtcars$gear)) + geom_bar()
library(plotly)
?plot_geo
map_data("world", "canada") %>%
group_by(group) %>%
plot_geo(x = ~long, y = ~lat) %>%
add_markers(size = I(1))
?plot_dendro
?plot_ly
plot_ly(economics, x = ~pop)
plot_ly(economics, x = pop)
plot_ly(economics, x = economics$pop)
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(z = ~volcano)
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
plot_ly(z = ~volcano)
plot_ly(z = ~volcano, type = "surface")
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
?plot_dendro
hc <- hclust(dist(USArrests), "ave")
dend1 <- as.dendrogram(hc)
plot_dendro(dend1, height = 600) %>%
hide_legend() %>%
highlight(persistent = TRUE, dynamic = TRUE)
plot_ly(regWomen)
plot_ly(mtcars)
plot_ly(mtcars, x = mtcars$cyl)
plot_ly(mtcars, y = mtcars$cyl)
plot_ly(cars, y = cars$speed)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot(women, x = women$height)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot_ly(women, x = women$height)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot_ly(women, y = women$height)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um gráfico de barras
plot_ly(mtcars, y = mtcars$wt)
volcano
class(volcano)
volcano[1,]
volcano[1,1]
#se apenas um eixo for fornecido criará um histograma
plot_ly(mtcars, y = mtcars$wt, type = "hist")
#se apenas um eixo for fornecido criará um histograma
plot_ly(mtcars, y = mtcars$wt, type = "histogram")
plot_ly(economics, x = ~date, y = ~pop)
library(plotly)
plot_ly(economics, x = ~date, y = ~pop)
#se apenas um eixo for fornecido criará um histograma
plot_ly(mtcars, y = mtcars$wt, type = "histogram")
plot_ly(z = ~volcano, type = "heatmap")
plot_ly(z = ~volcano, type = "surface")
matrix(c(1:5),c(1:5))
matrix(c(1:10),c(1:5))
matrix(c(1:10),c(1:10))
matrix(c(1:10))
matrix(1:10)
matrix(1:10,1:20)
