print("algo")
print(qqMerda)
print("ok")
print(teste)
tese
tese = 6
tese <- 3
tese
teste <- 5l
teste <- 5L
teste <- 5
install.packages("swirl")
library("swirl")
library("swirl")
install.packages("swirl")
library("swirl")
install.packages("swirl")
library("swirl")
select_language(language = 'portuguese')
install_course_github('elthonf','Aprenda_R_no_R')
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,55,z)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
library("swirl")
swirl()
TURE == TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library("swirl")
swirl()
setwd("~/mba/ia_com_r")
plot(cars)
c(1,2,3)
plot(cars)
cars
cars
s <- (3+3) -> sq
n <- ((5 + 5) * 4) / 3
n <- ((5 + 5) * 4) / 2
n <- ((5 + 5) * 4) / 2
n <- ((5 + 5) * 4) / 2
n
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 2
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v <- c(1,2,3,4,5)
v
v <- c(1,2,3,4,5)
v
v <- 1:5
v <- c(1,2,3,4,5)
v
v <- 1:5
v
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v[0]
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v[1]
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
plot(v)
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v * n
v ** 2
v <- seq.int(from = 1, to = 5, by = 1)
v
vis <- v[1] + v[3]
vis
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v ** 2
vis <- v[1] + v[3]
vis
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v
v ** 2
v
vis <- v[1] + v[3]
vis
v * n
v
print("aqui")
v ** 2
v
vis <- v[1] + v[3]
vis
v * n
v
v ** 2
v
vis <- v[1] + v[3]
vis
v * n
v ** 2
vis <- v[1] + v[3]
vis
vis <- v[1] + v[3]
vis
v2 <- c(2,2,2,2,2)
v +v2
v2 <- c(3,3,3)
v * v2
v[1:3]
v > 3
v[v<4]
v[v>3]
v > 3
m1 <- matrix(1:20, nrow = 4, ncol = 5)
m1
View(m1)
m1 * 2
m1
m1 * 5
m1 * v
v
m1 + v
m1 * v
n <- ((5 + 5) * 4) / 2
n
sqrt(n + 5) -> sq
sq
sq ^ 3
v <- c(1,2,3,4,5)
v
v <- 1:5
v
seq(5) -> v
v
v <- seq.int(from = 1, to = 5, by = 1)
v
v_names <- c("um", "dois", "três", "quatro", "cinco")
names(v) <- v_names
v
v * n
v ** 2
vis <- v[1] + v[3]
vis
v2 <- c(2,2,2,2,2)
v +v2
v2 <- c(3,3,3)
v * v2
v[1:3]
v > 3
v[v>3]
m1 <- matrix(1:20, nrow = 4, ncol = 5)
m1
m1 * 5
m1 * v
